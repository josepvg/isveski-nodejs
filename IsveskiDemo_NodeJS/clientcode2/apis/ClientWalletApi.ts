/* tslint:disable */
/* eslint-disable */
/**
 * Isveski Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientTicketAction,
  ClientWalletResponse,
  ClientWalletTicket,
  CreateTicketLogRequest,
  CreateTicketRequest,
  CreateTicketResponse,
  DeleteTicketRequest,
  ErrorModel,
  SearchUserResponse,
  UpdateTicketRequest,
} from '../models/index';
import {
    ClientTicketActionFromJSON,
    ClientTicketActionToJSON,
    ClientWalletResponseFromJSON,
    ClientWalletResponseToJSON,
    ClientWalletTicketFromJSON,
    ClientWalletTicketToJSON,
    CreateTicketLogRequestFromJSON,
    CreateTicketLogRequestToJSON,
    CreateTicketRequestFromJSON,
    CreateTicketRequestToJSON,
    CreateTicketResponseFromJSON,
    CreateTicketResponseToJSON,
    DeleteTicketRequestFromJSON,
    DeleteTicketRequestToJSON,
    ErrorModelFromJSON,
    ErrorModelToJSON,
    SearchUserResponseFromJSON,
    SearchUserResponseToJSON,
    UpdateTicketRequestFromJSON,
    UpdateTicketRequestToJSON,
} from '../models/index';

export interface CreateTicketOperationRequest {
    createTicketRequest: CreateTicketRequest;
}

export interface CreateTicketLogOperationRequest {
    createTicketLogRequest: CreateTicketLogRequest;
}

export interface DeleteTicketOperationRequest {
    deleteTicketRequest: DeleteTicketRequest;
}

export interface GetTicketActionsRequest {
    ticketId: string;
}

export interface GetTicketByIdRequest {
    ticketId: string;
}

export interface GetWalletByClientRequest {
    userid: string;
}

export interface SearchUserRequest {
    username: string;
}

export interface UpdateTicketOperationRequest {
    updateTicketRequest: UpdateTicketRequest;
}

/**
 * 
 */
export class ClientWalletApi extends runtime.BaseAPI {

    /**
     * Creates a ticket in the users wallet and sends a push notification of that event
     * Creates a ticket in the users wallet
     */
    async createTicketRaw(requestParameters: CreateTicketOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTicketResponse>> {
        if (requestParameters['createTicketRequest'] == null) {
            throw new runtime.RequiredError(
                'createTicketRequest',
                'Required parameter "createTicketRequest" was null or undefined when calling createTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ClientWallet/CreateTicket`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTicketRequestToJSON(requestParameters['createTicketRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTicketResponseFromJSON(jsonValue));
    }

    /**
     * Creates a ticket in the users wallet and sends a push notification of that event
     * Creates a ticket in the users wallet
     */
    async createTicket(requestParameters: CreateTicketOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTicketResponse> {
        const response = await this.createTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a ticket log for the specified ticket
     * Creates a ticket log
     */
    async createTicketLogRaw(requestParameters: CreateTicketLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['createTicketLogRequest'] == null) {
            throw new runtime.RequiredError(
                'createTicketLogRequest',
                'Required parameter "createTicketLogRequest" was null or undefined when calling createTicketLog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ClientWallet/CreateTicketLog`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTicketLogRequestToJSON(requestParameters['createTicketLogRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Creates a ticket log for the specified ticket
     * Creates a ticket log
     */
    async createTicketLog(requestParameters: CreateTicketLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createTicketLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the specified ticket from the users wallet
     * Deletes the ticket
     */
    async deleteTicketRaw(requestParameters: DeleteTicketOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['deleteTicketRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteTicketRequest',
                'Required parameter "deleteTicketRequest" was null or undefined when calling deleteTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ClientWallet/DeleteTicket`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteTicketRequestToJSON(requestParameters['deleteTicketRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the specified ticket from the users wallet
     * Deletes the ticket
     */
    async deleteTicket(requestParameters: DeleteTicketOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTicketRaw(requestParameters, initOverrides);
    }

    /**
     * Gets the list of actions that have been performed on this ticket
     * Gets the actions belongint to this ticket
     */
    async getTicketActionsRaw(requestParameters: GetTicketActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientTicketAction>>> {
        if (requestParameters['ticketId'] == null) {
            throw new runtime.RequiredError(
                'ticketId',
                'Required parameter "ticketId" was null or undefined when calling getTicketActions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ticketId'] != null) {
            queryParameters['ticketId'] = requestParameters['ticketId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ClientWallet/GetTicketActions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientTicketActionFromJSON));
    }

    /**
     * Gets the list of actions that have been performed on this ticket
     * Gets the actions belongint to this ticket
     */
    async getTicketActions(requestParameters: GetTicketActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientTicketAction>> {
        const response = await this.getTicketActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the ticket specified by the id, the data, templates and name
     * Gets the ticket specified by the id
     */
    async getTicketByIdRaw(requestParameters: GetTicketByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientWalletTicket>> {
        if (requestParameters['ticketId'] == null) {
            throw new runtime.RequiredError(
                'ticketId',
                'Required parameter "ticketId" was null or undefined when calling getTicketById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ticketId'] != null) {
            queryParameters['ticketId'] = requestParameters['ticketId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ClientWallet/GetTicketById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientWalletTicketFromJSON(jsonValue));
    }

    /**
     * Gets the ticket specified by the id, the data, templates and name
     * Gets the ticket specified by the id
     */
    async getTicketById(requestParameters: GetTicketByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientWalletTicket> {
        const response = await this.getTicketByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the users wallet but only the tickets accessible for this client
     * Gets the users wallet
     */
    async getWalletByClientRaw(requestParameters: GetWalletByClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientWalletResponse>> {
        if (requestParameters['userid'] == null) {
            throw new runtime.RequiredError(
                'userid',
                'Required parameter "userid" was null or undefined when calling getWalletByClient().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userid'] != null) {
            queryParameters['userid'] = requestParameters['userid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ClientWallet/GetWalletByClient`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientWalletResponseFromJSON(jsonValue));
    }

    /**
     * Gets the users wallet but only the tickets accessible for this client
     * Gets the users wallet
     */
    async getWalletByClient(requestParameters: GetWalletByClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientWalletResponse> {
        const response = await this.getWalletByClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches the user by user name, returning the user id
     * Searches the user by username
     */
    async searchUserRaw(requestParameters: SearchUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchUserResponse>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling searchUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ClientWallet/SearchUser`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchUserResponseFromJSON(jsonValue));
    }

    /**
     * Searches the user by user name, returning the user id
     * Searches the user by username
     */
    async searchUser(requestParameters: SearchUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchUserResponse> {
        const response = await this.searchUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the specified ticket, replacing it with the new data and templates
     * Updates the ticket
     */
    async updateTicketRaw(requestParameters: UpdateTicketOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateTicketRequest'] == null) {
            throw new runtime.RequiredError(
                'updateTicketRequest',
                'Required parameter "updateTicketRequest" was null or undefined when calling updateTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/ClientWallet/UpdateTicket`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTicketRequestToJSON(requestParameters['updateTicketRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the specified ticket, replacing it with the new data and templates
     * Updates the ticket
     */
    async updateTicket(requestParameters: UpdateTicketOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTicketRaw(requestParameters, initOverrides);
    }

}
