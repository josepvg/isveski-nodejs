/* tslint:disable */
/* eslint-disable */
/**
 * Isveski Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorModel,
  VerifyCredentialsResult,
  VerifyCredentialsUserIdResult,
  VerifyDto,
  VerifyUserIdDto,
} from '../models/index';
import {
    ErrorModelFromJSON,
    ErrorModelToJSON,
    VerifyCredentialsResultFromJSON,
    VerifyCredentialsResultToJSON,
    VerifyCredentialsUserIdResultFromJSON,
    VerifyCredentialsUserIdResultToJSON,
    VerifyDtoFromJSON,
    VerifyDtoToJSON,
    VerifyUserIdDtoFromJSON,
    VerifyUserIdDtoToJSON,
} from '../models/index';

export interface VerifiesTheCredentialsRequest {
    verifyUserIdDto: VerifyUserIdDto;
}

export interface VerifyCredentialsRequest {
    verifyDto: VerifyDto;
}

/**
 * 
 */
export class DemoApi extends runtime.BaseAPI {

    /**
     * Verifies the credentials but only for the user id
     * Verifies the credentials for the playground
     */
    async verifiesTheCredentialsRaw(requestParameters: VerifiesTheCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifyCredentialsUserIdResult>> {
        if (requestParameters['verifyUserIdDto'] == null) {
            throw new runtime.RequiredError(
                'verifyUserIdDto',
                'Required parameter "verifyUserIdDto" was null or undefined when calling verifiesTheCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Demo/VerifyCredentialsUserId`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyUserIdDtoToJSON(requestParameters['verifyUserIdDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyCredentialsUserIdResultFromJSON(jsonValue));
    }

    /**
     * Verifies the credentials but only for the user id
     * Verifies the credentials for the playground
     */
    async verifiesTheCredentials(requestParameters: VerifiesTheCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifyCredentialsUserIdResult> {
        const response = await this.verifiesTheCredentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verifies the credentials for the playground part
     * Verifies the credentials for the playground
     */
    async verifyCredentialsRaw(requestParameters: VerifyCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifyCredentialsResult>> {
        if (requestParameters['verifyDto'] == null) {
            throw new runtime.RequiredError(
                'verifyDto',
                'Required parameter "verifyDto" was null or undefined when calling verifyCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Demo/VerifyCredentials`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyDtoToJSON(requestParameters['verifyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyCredentialsResultFromJSON(jsonValue));
    }

    /**
     * Verifies the credentials for the playground part
     * Verifies the credentials for the playground
     */
    async verifyCredentials(requestParameters: VerifyCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifyCredentialsResult> {
        const response = await this.verifyCredentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
