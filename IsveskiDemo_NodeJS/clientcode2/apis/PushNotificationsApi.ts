/* tslint:disable */
/* eslint-disable */
/**
 * Isveski Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SendToTicketRequest,
} from '../models/index';
import {
    SendToTicketRequestFromJSON,
    SendToTicketRequestToJSON,
} from '../models/index';

export interface SendToTicketOperationRequest {
    sendToTicketRequest: SendToTicketRequest;
}

/**
 * 
 */
export class PushNotificationsApi extends runtime.BaseAPI {

    /**
     */
    async sendToTicketRaw(requestParameters: SendToTicketOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['sendToTicketRequest'] == null) {
            throw new runtime.RequiredError(
                'sendToTicketRequest',
                'Required parameter "sendToTicketRequest" was null or undefined when calling sendToTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/PushNotifications/SendToTicket`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendToTicketRequestToJSON(requestParameters['sendToTicketRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async sendToTicket(requestParameters: SendToTicketOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.sendToTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
