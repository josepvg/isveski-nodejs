/* tslint:disable */
/* eslint-disable */
/**
 * Isveski Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ListenToBeaconsRequest
 */
export interface ListenToBeaconsRequest {
    /**
     * 
     * @type {string}
     * @memberof ListenToBeaconsRequest
     */
    communicationId: string;
    /**
     * 
     * @type {string}
     * @memberof ListenToBeaconsRequest
     */
    ticketId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListenToBeaconsRequest
     */
    beacons: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ListenToBeaconsRequest
     */
    parameter: string;
    /**
     * 
     * @type {number}
     * @memberof ListenToBeaconsRequest
     */
    notifyNotFoundSek: number;
    /**
     * 
     * @type {number}
     * @memberof ListenToBeaconsRequest
     */
    timeoutSek: number;
}

/**
 * Check if a given object implements the ListenToBeaconsRequest interface.
 */
export function instanceOfListenToBeaconsRequest(value: object): boolean {
    if (!('communicationId' in value)) return false;
    if (!('ticketId' in value)) return false;
    if (!('beacons' in value)) return false;
    if (!('parameter' in value)) return false;
    if (!('notifyNotFoundSek' in value)) return false;
    if (!('timeoutSek' in value)) return false;
    return true;
}

export function ListenToBeaconsRequestFromJSON(json: any): ListenToBeaconsRequest {
    return ListenToBeaconsRequestFromJSONTyped(json, false);
}

export function ListenToBeaconsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListenToBeaconsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'communicationId': json['communicationId'],
        'ticketId': json['ticketId'],
        'beacons': json['beacons'],
        'parameter': json['parameter'],
        'notifyNotFoundSek': json['notifyNotFoundSek'],
        'timeoutSek': json['timeoutSek'],
    };
}

export function ListenToBeaconsRequestToJSON(value?: ListenToBeaconsRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'communicationId': value['communicationId'],
        'ticketId': value['ticketId'],
        'beacons': value['beacons'],
        'parameter': value['parameter'],
        'notifyNotFoundSek': value['notifyNotFoundSek'],
        'timeoutSek': value['timeoutSek'],
    };
}

