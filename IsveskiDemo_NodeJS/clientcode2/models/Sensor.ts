/* tslint:disable */
/* eslint-disable */
/**
 * Isveski Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SensorType } from './SensorType';
import {
    SensorTypeFromJSON,
    SensorTypeFromJSONTyped,
    SensorTypeToJSON,
} from './SensorType';
import type { TicketActive } from './TicketActive';
import {
    TicketActiveFromJSON,
    TicketActiveFromJSONTyped,
    TicketActiveToJSON,
} from './TicketActive';

/**
 * 
 * @export
 * @interface Sensor
 */
export interface Sensor {
    /**
     * 
     * @type {string}
     * @memberof Sensor
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Sensor
     */
    name?: string;
    /**
     * 
     * @type {SensorType}
     * @memberof Sensor
     */
    sensorType?: SensorType;
    /**
     * 
     * @type {string}
     * @memberof Sensor
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Sensor
     */
    enabled?: boolean;
    /**
     * 
     * @type {Array<TicketActive>}
     * @memberof Sensor
     */
    ticketsActive?: Array<TicketActive>;
}

/**
 * Check if a given object implements the Sensor interface.
 */
export function instanceOfSensor(value: object): boolean {
    return true;
}

export function SensorFromJSON(json: any): Sensor {
    return SensorFromJSONTyped(json, false);
}

export function SensorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Sensor {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'sensorType': json['sensorType'] == null ? undefined : SensorTypeFromJSON(json['sensorType']),
        'description': json['description'] == null ? undefined : json['description'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'ticketsActive': json['ticketsActive'] == null ? undefined : ((json['ticketsActive'] as Array<any>).map(TicketActiveFromJSON)),
    };
}

export function SensorToJSON(value?: Sensor | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'sensorType': SensorTypeToJSON(value['sensorType']),
        'description': value['description'],
        'enabled': value['enabled'],
        'ticketsActive': value['ticketsActive'] == null ? undefined : ((value['ticketsActive'] as Array<any>).map(TicketActiveToJSON)),
    };
}

