/**
 * Isveski Client
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ClientDeviceInterfaceApi", () => {
  let instance: api.ClientDeviceInterfaceApi
  beforeEach(function() {
    instance = new api.ClientDeviceInterfaceApi(config)
  });

  test("bioAuthenticate", () => {
    const body: api.BioAuthenticationRequest = undefined
    return expect(instance.bioAuthenticate(body, {})).resolves.toBe(null)
  })
  test("listenToBeacons", () => {
    const body: api.ListenToBeaconsRequest = undefined
    return expect(instance.listenToBeacons(body, {})).resolves.toBe(null)
  })
  test("showMenu", () => {
    const body: api.ShowMenuRequest = undefined
    return expect(instance.showMenu(body, {})).resolves.toBe(null)
  })
  test("showMessage", () => {
    const body: api.ShowMessageRequest = undefined
    return expect(instance.showMessage(body, {})).resolves.toBe(null)
  })
  test("showMultipleChoice", () => {
    const body: api.ShowMultipleChoiceRequest = undefined
    return expect(instance.showMultipleChoice(body, {})).resolves.toBe(null)
  })
  test("showPrompt", () => {
    const body: api.ShowPromptRequest = undefined
    return expect(instance.showPrompt(body, {})).resolves.toBe(null)
  })
  test("showQrCode", () => {
    const body: api.ShowQrCodeRequest = undefined
    return expect(instance.showQrCode(body, {})).resolves.toBe(null)
  })
  test("showWebPage", () => {
    const body: api.ShowWebPageRequest = undefined
    return expect(instance.showWebPage(body, {})).resolves.toBe(null)
  })
})

describe("ClientSensorsApi", () => {
  let instance: api.ClientSensorsApi
  beforeEach(function() {
    instance = new api.ClientSensorsApi(config)
  });

  test("getListOfSensors", () => {
    return expect(instance.getListOfSensors({})).resolves.toBe(null)
  })
})

describe("ClientTicketDefinitionsApi", () => {
  let instance: api.ClientTicketDefinitionsApi
  beforeEach(function() {
    instance = new api.ClientTicketDefinitionsApi(config)
  });

  test("getListOfTicketDefinitions", () => {
    return expect(instance.getListOfTicketDefinitions({})).resolves.toBe(null)
  })
})

describe("ClientWalletApi", () => {
  let instance: api.ClientWalletApi
  beforeEach(function() {
    instance = new api.ClientWalletApi(config)
  });

  test("createTicket", () => {
    const body: api.CreateTicketRequest = undefined
    return expect(instance.createTicket(body, {})).resolves.toBe(null)
  })
  test("createTicketLog", () => {
    const body: api.CreateTicketLogRequest = undefined
    return expect(instance.createTicketLog(body, {})).resolves.toBe(null)
  })
  test("deleteTicket", () => {
    const body: api.DeleteTicketRequest = undefined
    return expect(instance.deleteTicket(body, {})).resolves.toBe(null)
  })
  test("getTicketActions", () => {
    const ticketId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.getTicketActions(ticketId, {})).resolves.toBe(null)
  })
  test("getTicketById", () => {
    const ticketId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.getTicketById(ticketId, {})).resolves.toBe(null)
  })
  test("getWalletByClient", () => {
    const userid: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.getWalletByClient(userid, {})).resolves.toBe(null)
  })
  test("searchUser", () => {
    const username: string = "username_example"
    return expect(instance.searchUser(username, {})).resolves.toBe(null)
  })
  test("updateTicket", () => {
    const body: api.UpdateTicketRequest = undefined
    return expect(instance.updateTicket(body, {})).resolves.toBe(null)
  })
})

describe("DemoApi", () => {
  let instance: api.DemoApi
  beforeEach(function() {
    instance = new api.DemoApi(config)
  });

  test("verifiesTheCredentials", () => {
    const body: api.VerifyUserIdDto = undefined
    return expect(instance.verifiesTheCredentials(body, {})).resolves.toBe(null)
  })
  test("verifyCredentials", () => {
    const body: api.VerifyDto = undefined
    return expect(instance.verifyCredentials(body, {})).resolves.toBe(null)
  })
})

describe("PushNotificationsApi", () => {
  let instance: api.PushNotificationsApi
  beforeEach(function() {
    instance = new api.PushNotificationsApi(config)
  });

  test("sendToTicket", () => {
    const body: api.SendToTicketRequest = undefined
    return expect(instance.sendToTicket(body, {})).resolves.toBe(null)
  })
})

